global
    # HAProxy sends logs to our customized syslog-server. Note that the
    # port used below should match syslog-server's 'port' configuration
    log localhost:9003 format raw local0 info

    # Comment out the line below to also enable logging to stdout, useful for debugging
    # log stdout format raw local0 info

    # the lua script that is used by the QoS framework
    lua-load     /workspace/src/haproxy_lua.lua

defaults
    log global
    mode http
    timeout connect         10s
    timeout client          1m
    timeout server          1m

listen proxy
    # We open a TCP listener to accept the QoS violator list from polygen
    # note that the port used below should match the 'haproxy_servers'
    # configuration item of policy_generator.
    bind *:9002
    mode tcp
    tcp-request content use-service lua.ingest_policies

frontend in_localdev
    bind *:9001
    option httplog

    filter weir unknown-user-limit 5M active-requests-refresh-interval 10s minimum-limit 128K
    acl is_health_check path -m str /healthcheck

    # For every request, we run lua.req_eval first and return 503 for Qos vialotors
    # It's important that we do this *before* activate-weir so that we don't count rejected connections towards the QoS limit
    # http-request directives get executed in the order they appear in the file so we achieve this by literally just calling
    # lua.req_eval before activate-weir.
    http-request deny deny_status 503 if { lua.req_eval() 1 }
    http-request activate-weir user-key lua.get_user_access_key() operation-class var(txn.op_class) operation-direction lua.get_s3_op_direction() if !is_health_check

    default_backend back_servers_localdev

backend back_servers_localdev
    mode http
    server srv1 localhost:9000

